#include<iostream>
#include"ArcNode.cpp"
using namespace std;

struct QNode
{
	int v;
	int d;
	QNode(int v,int d)
	{
		this->v = v;
		this->d = d;
	}
};

int shortdist(AdjGraph& G, int u, int v)		//u到v的最短路径
{
	int visited[MAXV];
	memset(visited, 0, sizeof(visited));
	queue<QNode>qu;
	visited[u] = 1;
	qu.push(QNode(u, 0));
	while (!qu.empty())
	{
		QNode q = qu.front();
		qu.pop();
		if (q.v == v)
			return q.d;
		ArcNode* arc = G.adjlist[q.v].firstarc;
		while (arc != NULL)
		{
			if (visited[arc->adjvex] == 0)
				qu.push(QNode(arc->adjvex, q.d + 1));
			visited[arc->adjvex] = 1;
			arc = arc->nextarc;
		}
	}
	return INF;
}

int shortdist1(AdjGraph& G, int u, int v)
{
	int visited[MAXV];
	memset(visited, 0, sizeof(visited));
	queue<int>qu;
	visited[u] = 1;
	qu.push(u);
	int cnt = 1,h=0;
	while (!qu.empty())
	{
		while (cnt--)
		{
			u = qu.front();
			qu.pop();
			if (u == v)
				return h;
			ArcNode* p = G.adjlist[u].firstarc;
			while (p != NULL)
			{
				if (visited[p->adjvex] == 0)
				{
					visited[p->adjvex] = 1;
					qu.push(p->adjvex);
				}
				p = p->nextarc;
			}
		}
		cnt = qu.size();
		h++;
	}
	return INF;
}

int shortdist2(AdjGraph& G, int u, int v)
{
	int visited[MAXV];
	memset(visited, 0, sizeof(visited));
	queue<int>qu;
	visited[u] = 1;
	qu.push(u);
	int h = 0, last = u;
	while (!qu.empty())
	{
		u = qu.front(); qu.pop();
		if (u == v)
			return h;
		ArcNode* p = G.adjlist[u].firstarc;
		while (p != NULL)
		{
			if (visited[p->adjvex] == 0)
			{
				visited[p->adjvex] = 1;
				qu.push(p->adjvex);
			}
			p = p->nextarc;
		}
		if (last == u)
		{
			last = qu.back();
			h++;
		}
	}
	return INF;
}
int main()
{
	AdjGraph G;
	int n = 6, e = 9;
	int a[MAXV][MAXV] = { {0, 1, 0, 1, 0, 0}, { 0,0,0,0,0,1 }, {0, 1, 0, 0, 0, 1}, {0, 1, 0, 0, 1, 0}, {0, 1, 0, 0, 0, 1}, {0, 0, 0, 0, 0, 0} };
	G.createAdjGraph(a, n, e);
	G.DispAdjGraph();
	int v = 0, u = 4;
	int dist = shortdist(G, v, u);
	cout << "-------------" << endl;
	cout << dist << endl;
	dist = shortdist1(G, v, u);
	cout << dist << endl;
	dist = shortdist2(G, v, u);
	cout << dist << endl;
}
#include<iostream>
#include<queue>
using namespace std;

const int MAXV = 100;
const int INF = 0x3f3f3f3f;

struct ArcNode
{
	int adjvex;	//领接点
	int weight; //权值
	ArcNode* nextarc;	//下一条边的边界点
	ArcNode(int a, int w)
	{
		adjvex = a;
		weight = w;
		nextarc = NULL;
	}
};

struct HNode
{
	string info;	//顶点信息
	ArcNode* firstarc;	//指向第一条边的边结点
};

class AdjGraph
{
public:
	HNode adjlist[MAXV];
	int n, e;
	AdjGraph()
	{
		for (int i = 0; i < MAXV; i++)
		{
			adjlist[i].firstarc = NULL;
		}
	}
	~AdjGraph()
	{
		ArcNode* pre, * p;
		for (int i = 0; i < n; i++)
		{
			pre = adjlist[i].firstarc;
			p = pre;
			while (p != NULL)
			{
				p = p->nextarc;
				delete pre;
				pre = p;
			}
			delete pre;
		}
	}
	//头插法
	void createAdjGraph(int a[][MAXV], int n, int e)
	{
		ArcNode* p;
		this->n = n; this->e = e;
		for(int i=0;i<n;i++)
			for (int j = 0; j < n; j++)
			{
				if (a[i][j] != 0 && a[i][j] != INF)
				{
					p = new ArcNode(j,a[i][j]);
					p->nextarc = adjlist[i].firstarc;
					adjlist[i].firstarc = p;
				}
			}
	}
	//输出领接表
	void DispAdjGraph()
	{
		ArcNode* p;
		for (int i = 0; i < n; i++)
		{
			cout << i << " ";
			p = adjlist[i].firstarc;
			if(p!=NULL)
				cout << "->";
			while (p != NULL)
			{
				cout <<"(" << p->adjvex << "," << p->weight << ")";
				p = p->nextarc;
			}
			cout << endl;
		}
	}

	int* visited = new int[MAXV]();
	//深度优先遍历
	void DFS(AdjGraph& G, int v)
	{
		cout << v << " ";
		visited[v] = 1;
		ArcNode* p = G.adjlist[v].firstarc;
		while (p != NULL)
		{
			int w = p->adjvex;
			if (visited[w] == 0)	DFS(G, w);
			p = p->nextarc;
		}
		visited[v] = 0;
	}
	//广度优先遍历
	void BFS(AdjGraph* G, int v)
	{
		queue<int> qu;
		cout << v << " ";
		visited[v] = 1;
		qu.push(v);

		while (!qu.empty())
		{
			int w = qu.front();
			qu.pop();
			ArcNode* p = G->adjlist[w].firstarc;
			while (p != NULL)
			{
				w = p->adjvex;
				if (visited[w] == 0)
				{
					visited[w] = 1;
					qu.push(w);
				}
				p = p->nextarc;
			}
		}
	}

	//对非连通图的遍历
	void DFSA(AdjGraph& G)
	{
		for (int i = 0; i < G.n; i++)
		{
			if (visited[i] == 0)
				DFS(G, i);
		}
	}
	void BFSA(AdjGraph& G)
	{
		for (int i = 0; i < G.n; i++)
		{
			if (visited[i] == 0)
				DFS(G, i);
		}
	}

	//无向图的度
	int Degree1(AdjGraph& g, int v)
	{
		int d = 0;
		ArcNode* p = g.adjlist[v].firstarc;
		while (p != NULL)
		{
			d++;
			p = p->nextarc;
		}
		return d;
	}
};

#include<iostream>
#include<vector>
#include<queue>
using namespace std;

const int MAXV = 100;
const int INF = 0x3f3f3f3f;

class MetGraph
{
public:
	int edges[MAXV][MAXV];
	int n, e;	//顶点数和边数
	string vexs[MAXV];	//存放顶点信息
	//创建领接矩阵
	void CreateMetGraph(int a[][MAXV], int n, int e)
	{
		this->n = n; this->e = e;
		for (int i = 0; i < n; i++)
			for (int j = 0; j < n; j++)
				this->edges[i][j] = a[i][j];
	}
	//输出领接矩阵
	void DispMetGraph()
	{
		for (int i = 0; i < n; i++)
		{
			for (int j = 0; j < n; j++)
			{
				if (edges[i][j] == INF)
					cout << "∞" << endl;
				else
					cout << edges[i][j] << endl;
			}
		}
	}
};

//求某点的度
int Degree1(MetGraph& g, int v)
{
	int d = 0;
	for (int j = 0; j < g.n; j++)
		if (g.edges[v][j] != 0 && g.edges[v][j] != INF)
			d++;
	return d;
}
//求有向图中某顶点的出度和入度
vector<int> degree2(MetGraph& g, int v)
{
	vector<int> ans(2,0);
	for (int j = 0; j < g.n; j++)
	{
		if (g.edges[v][j] != 0 && g.edges[v][j] != INF)
			ans[0]++;
	}
	for (int i = 0; i < g.n; i++)
	{
		if (g.edges[i][v] != 0 && g.edges[i][v] != INF)
			ans[1]++;
	}
	return ans;
}
//深度优先遍历
int visited[MAXV];
void DFS(MetGraph& g, int v)
{
	cout << v << " ";
	visited[v] = 1;
	for (int j = 0; j < g.n; j++)
	{
		if (g.edges[v][j] != 0 && g.edges[v][j] != INF && visited[j] == 0)
			DFS(g, j);
	}
}
//广度优先遍历
void BFS(MetGraph& g, int v)
{
	cout << v << " ";
	visited[v] = 1;
	queue<int> qu;
	qu.push(v);
	while (!qu.empty())
	{
		int w = qu.front();
		qu.pop();
		for (int i = 0; i < g.n; i++)
		{
			if (g.edges[w][i] != 0 && g.edges[w][i] != INF && visited[i] == 0)
			{
				cout << i << " ";
				visited[i] = 1;
				qu.push(i);
			}
		}
	}
}
